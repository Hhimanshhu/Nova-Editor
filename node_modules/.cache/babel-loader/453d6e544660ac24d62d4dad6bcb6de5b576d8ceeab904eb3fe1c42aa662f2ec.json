{"ast":null,"code":"var _jsxFileName = \"E:\\\\Programming\\\\React\\\\texteditor\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from './components/TextForm';\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setMode] = useState(\"light\");\n  const [redmode, setredmode] = useState(\"light\");\n  const [alert, setalert] = useState(null);\n  const showalert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 2000);\n  };\n  let togglemode = cls => {\n    document.body;\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      showalert(\"Light Mode enable\", \"success\");\n      // document.title = \"TextEditor-Light mode\";       //Not Needed\n    } else {\n      setMode(\"dark\");\n      showalert(\"Dark Mode enable\", \"success\");\n      // document.title = \"TextEditor-Dark mode\"         //Not Needed\n    }\n  };\n  let togglemode1 = () => {\n    if (redmode === \"red\") {\n      setredmode(\"light\");\n      showalert(\"Light Mode enable\", \"success\");\n    } else {\n      setredmode(\"red\");\n      showalert(\"Red Mode enable\", \"success\");\n    }\n  };\n  useEffect(() => {\n    document.body.className = `${mode} ${redmode}`; // Apply class based on mode\n  }, [mode, redmode]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        titlex: \"TextUtiles\",\n        abouttext: \"About\",\n        dropdown: \"List\",\n        mode: mode,\n        redmode: redmode,\n        togglemode: togglemode,\n        togglemode1: togglemode1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        alert: alert\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container my-3\",\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/about\",\n            element: /*#__PURE__*/_jsxDEV(About, {\n              mode: mode,\n              redmode: redmode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(TextForm, {\n              heading: \"Text Editor -Word Counter, Character Counter, Remove Extra space and Many More\",\n              mode: mode,\n              showalert: showalert\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 36\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"+Zo/IIdWIQBgs0QCxNCafqkkI9I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","About","Navbar","TextForm","Alert","BrowserRouter","Router","Routes","Route","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setMode","redmode","setredmode","alert","setalert","showalert","message","type","msg","setTimeout","togglemode","cls","document","body","togglemode1","className","children","titlex","abouttext","dropdown","fileName","_jsxFileName","lineNumber","columnNumber","path","element","heading","_c","$RefreshReg$"],"sources":["E:/Programming/React/texteditor/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from './components/TextForm';\nimport Alert from \"./components/Alert\";\n\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [redmode, setredmode] = useState(\"light\");\n\n  const [alert, setalert] = useState(null);\n  const showalert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 2000);\n  };\n  \n  let togglemode = (cls) => {\n\n    document.body\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      showalert(\"Light Mode enable\", \"success\");\n      // document.title = \"TextEditor-Light mode\";       //Not Needed\n    } else {\n      setMode(\"dark\");\n      showalert(\"Dark Mode enable\", \"success\");\n      // document.title = \"TextEditor-Dark mode\"         //Not Needed\n    }\n  };\n\n  let togglemode1 = () => {\n    if (redmode === \"red\") {\n      setredmode(\"light\");\n      showalert(\"Light Mode enable\", \"success\");\n    } else {\n      setredmode(\"red\");\n      showalert(\"Red Mode enable\", \"success\");\n    }\n  };\n\n  useEffect(() => {\n    document.body.className = `${mode} ${redmode}`; // Apply class based on mode\n  }, [mode, redmode]);\n\n  return (\n    <>\n    <Router>\n\n      <Navbar\n        titlex={\"TextUtiles\"}\n        abouttext=\"About\"\n        dropdown=\"List\"\n        mode={mode}\n        redmode={redmode}\n        togglemode={togglemode}\n        togglemode1={togglemode1}\n      />\n\n\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n      <Routes>\n          <Route path=\"/about\" element={<About mode={mode} redmode = {redmode} />} />\n          <Route path=\"/\" element={<TextForm heading=\"Text Editor -Word Counter, Character Counter, Remove Extra space and Many More\" mode={mode} showalert={showalert} />} />\n      </Routes>\n   {/* <TextForm heading=\"Enter Your Thought\" mode ={mode} showalert ={showalert}> </TextForm> */}\n      </div>\n\n    \n     \n\n    \n      </Router>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}