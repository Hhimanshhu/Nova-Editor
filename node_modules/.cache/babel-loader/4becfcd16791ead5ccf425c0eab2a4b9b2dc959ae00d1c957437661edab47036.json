{"ast":null,"code":"var _jsxFileName = \"E:\\\\Programming\\\\React\\\\texteditor\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from './components/TextForm';\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setMode] = useState(\"light\");\n  const [redmode, setredmode] = useState(\"light\");\n  const [alert, setalert] = useState(null);\n  const showalert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 2000);\n  };\n\n  // ✅ Updated `togglemode` function for multiple colors\n  let togglemode = cls => {\n    // Remove all previous color classes\n    document.body.classList.remove(\"bg-primary\", \"bg-danger\", \"bg-info\", \"bg-tertiary\", \"bg-dark\", \"bg-light\");\n\n    // Add the new selected class\n    document.body.classList.add(\"bg-\" + cls);\n\n    // Update mode state\n    setMode(cls);\n\n    // Show alert dynamically\n    showalert(`${cls.charAt(0).toUpperCase() + cls.slice(1)} Mode enabled`, \"success\");\n  };\n  let togglemode1 = () => {\n    if (redmode === \"red\") {\n      setredmode(\"light\");\n      showalert(\"Light Mode enabled\", \"success\");\n    } else {\n      setredmode(\"red\");\n      showalert(\"Red Mode enabled\", \"success\");\n    }\n  };\n  useEffect(() => {\n    document.body.className = `${mode} ${redmode}`; // Apply mode & redmode\n  }, [mode, redmode]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        titlex: \"TextUtiles\",\n        abouttext: \"About\",\n        dropdown: \"List\",\n        mode: mode,\n        redmode: redmode,\n        togglemode: togglemode // Pass updated togglemode\n        ,\n        togglemode1: togglemode1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        alert: alert\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container my-3\",\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/about\",\n            element: /*#__PURE__*/_jsxDEV(About, {\n              mode: mode,\n              redmode: redmode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 43\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(TextForm, {\n              heading: \"Text Editor - Word Counter, Character Counter, Remove Extra Space and More\",\n              mode: mode,\n              showalert: showalert\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 38\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"+Zo/IIdWIQBgs0QCxNCafqkkI9I=\");\n_c = App;\nexport default App;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n// import About from \"./components/About\";\n// import Navbar from \"./components/Navbar\";\n// import TextForm from './components/TextForm';\n// import Alert from \"./components/Alert\";\n\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\n// function App() {\n//   const [mode, setMode] = useState(\"light\");\n//   const [redmode, setredmode] = useState(\"light\");\n\n//   const [alert, setalert] = useState(null);\n//   const showalert = (message, type) => {\n//     setalert({\n//       msg: message,\n//       type: type,\n//     });\n//     setTimeout(() => {\n//       setalert(null);\n//     }, 2000);\n//   };\n\n//   let togglemode = (cls) => {\n//     if (mode === \"dark\") {\n//       setMode(\"light\");\n//       showalert(\"Light Mode enable\", \"success\");\n//       // document.title = \"TextEditor-Light mode\";       //Not Needed\n//     } else {\n//       setMode(\"dark\");\n//       showalert(\"Dark Mode enable\", \"success\");\n//       // document.title = \"TextEditor-Dark mode\"         //Not Needed\n//     }\n//   };\n\n//   let togglemode1 = () => {\n//     if (redmode === \"red\") {\n//       setredmode(\"light\");\n//       showalert(\"Light Mode enable\", \"success\");\n//     } else {\n//       setredmode(\"red\");\n//       showalert(\"Red Mode enable\", \"success\");\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.body.className = `${mode} ${redmode}`; // Apply class based on mode\n//   }, [mode, redmode]);\n\n//   return (\n//     <>\n//     <Router>\n\n//       <Navbar\n//         titlex={\"TextUtiles\"}\n//         abouttext=\"About\"\n//         dropdown=\"List\"\n//         mode={mode}\n//         redmode={redmode}\n//         togglemode={togglemode}\n//         togglemode1={togglemode1}\n//       />\n\n//       <Alert alert={alert} />\n//       <div className=\"container my-3\">\n//       <Routes>\n//           <Route path=\"/about\" element={<About mode={mode} redmode = {redmode} />} />\n//           <Route path=\"/\" element={<TextForm heading=\"Text Editor -Word Counter, Character Counter, Remove Extra space and Many More\" mode={mode} showalert={showalert} />} />\n//       </Routes>\n//    {/* <TextForm heading=\"Enter Your Thought\" mode ={mode} showalert ={showalert}> </TextForm> */}\n//       </div>\n\n//       </Router>\n//     </>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","About","Navbar","TextForm","Alert","BrowserRouter","Router","Routes","Route","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setMode","redmode","setredmode","alert","setalert","showalert","message","type","msg","setTimeout","togglemode","cls","document","body","classList","remove","add","charAt","toUpperCase","slice","togglemode1","className","children","titlex","abouttext","dropdown","fileName","_jsxFileName","lineNumber","columnNumber","path","element","heading","_c","$RefreshReg$"],"sources":["E:/Programming/React/texteditor/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from './components/TextForm';\nimport Alert from \"./components/Alert\";\n\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [redmode, setredmode] = useState(\"light\");\n  const [alert, setalert] = useState(null);\n\n  const showalert = (message, type) => {\n    setalert({ msg: message, type: type });\n    setTimeout(() => {\n      setalert(null);\n    }, 2000);\n  };\n\n  // ✅ Updated `togglemode` function for multiple colors\n  let togglemode = (cls) => {\n    // Remove all previous color classes\n    document.body.classList.remove(\"bg-primary\", \"bg-danger\", \"bg-info\", \"bg-tertiary\", \"bg-dark\", \"bg-light\");\n\n    // Add the new selected class\n    document.body.classList.add(\"bg-\" + cls);\n\n    // Update mode state\n    setMode(cls);\n\n    // Show alert dynamically\n    showalert(`${cls.charAt(0).toUpperCase() + cls.slice(1)} Mode enabled`, \"success\");\n  };\n\n  let togglemode1 = () => {\n    if (redmode === \"red\") {\n      setredmode(\"light\");\n      showalert(\"Light Mode enabled\", \"success\");\n    } else {\n      setredmode(\"red\");\n      showalert(\"Red Mode enabled\", \"success\");\n    }\n  };\n\n  useEffect(() => {\n    document.body.className = `${mode} ${redmode}`; // Apply mode & redmode\n  }, [mode, redmode]);\n\n  return (\n    <>\n      <Router>\n        <Navbar\n          titlex=\"TextUtiles\"\n          abouttext=\"About\"\n          dropdown=\"List\"\n          mode={mode}\n          redmode={redmode}\n          togglemode={togglemode} // Pass updated togglemode\n          togglemode1={togglemode1}\n        />\n\n        <Alert alert={alert} />\n\n        <div className=\"container my-3\">\n          <Routes>\n            <Route path=\"/about\" element={<About mode={mode} redmode={redmode} />} />\n            <Route path=\"/\" element={<TextForm heading=\"Text Editor - Word Counter, Character Counter, Remove Extra Space and More\" mode={mode} showalert={showalert} />} />\n          </Routes>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n// import About from \"./components/About\";\n// import Navbar from \"./components/Navbar\";\n// import TextForm from './components/TextForm';\n// import Alert from \"./components/Alert\";\n\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\n// function App() {\n//   const [mode, setMode] = useState(\"light\");\n//   const [redmode, setredmode] = useState(\"light\");\n\n//   const [alert, setalert] = useState(null);\n//   const showalert = (message, type) => {\n//     setalert({\n//       msg: message,\n//       type: type,\n//     });\n//     setTimeout(() => {\n//       setalert(null);\n//     }, 2000);\n//   };\n  \n//   let togglemode = (cls) => {\n//     if (mode === \"dark\") {\n//       setMode(\"light\");\n//       showalert(\"Light Mode enable\", \"success\");\n//       // document.title = \"TextEditor-Light mode\";       //Not Needed\n//     } else {\n//       setMode(\"dark\");\n//       showalert(\"Dark Mode enable\", \"success\");\n//       // document.title = \"TextEditor-Dark mode\"         //Not Needed\n//     }\n//   };\n\n//   let togglemode1 = () => {\n//     if (redmode === \"red\") {\n//       setredmode(\"light\");\n//       showalert(\"Light Mode enable\", \"success\");\n//     } else {\n//       setredmode(\"red\");\n//       showalert(\"Red Mode enable\", \"success\");\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.body.className = `${mode} ${redmode}`; // Apply class based on mode\n//   }, [mode, redmode]);\n\n//   return (\n//     <>\n//     <Router>\n\n//       <Navbar\n//         titlex={\"TextUtiles\"}\n//         abouttext=\"About\"\n//         dropdown=\"List\"\n//         mode={mode}\n//         redmode={redmode}\n//         togglemode={togglemode}\n//         togglemode1={togglemode1}\n//       />\n\n\n//       <Alert alert={alert} />\n//       <div className=\"container my-3\">\n//       <Routes>\n//           <Route path=\"/about\" element={<About mode={mode} redmode = {redmode} />} />\n//           <Route path=\"/\" element={<TextForm heading=\"Text Editor -Word Counter, Character Counter, Remove Extra space and Many More\" mode={mode} showalert={showalert} />} />\n//       </Routes>\n//    {/* <TextForm heading=\"Enter Your Thought\" mode ={mode} showalert ={showalert}> </TextForm> */}\n//       </div>\n\n    \n     \n\n    \n//       </Router>\n//     </>\n//   );\n// }\n\n// export default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}