{"ast":null,"code":"var _jsxFileName = \"E:\\\\Programming\\\\React\\\\texteditor\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from './components/TextForm';\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setMode] = useState(\"light\");\n  const [redmode, setRedmode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n  const toggleMode = color => {\n    console.log(color);\n    if (color) {\n      document.body.classList.add(\"bg-\" + color);\n    }\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      showAlert(\"Light Mode enabled\", \"success\");\n    } else {\n      setMode(\"dark\");\n      showAlert(\"Dark Mode enabled\", \"success\");\n    }\n  };\n  const toggleRedMode = () => {\n    if (redmode === \"light\") {\n      setRedmode(\"red\");\n      showAlert(\"Red Mode enabled\", \"success\");\n    } else {\n      setRedmode(\"light\");\n      showAlert(\"Light Mode enabled\", \"success\");\n    }\n  };\n  useEffect(() => {\n    document.body.className = `${mode} ${redmode}`; // Apply class based on mode\n  }, [mode, redmode]);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      titlex: \"TextUtiles\",\n      abouttext: \"About\",\n      dropdown: \"List\",\n      mode: mode,\n      redmode: redmode,\n      togglemode: toggleMode,\n      togglemode1: toggleRedMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      alert: alert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-3\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/about\",\n          element: /*#__PURE__*/_jsxDEV(About, {\n            mode: mode,\n            redmode: redmode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(TextForm, {\n            heading: \"Text Editor - Word Counter, Character Counter, Remove Extra Space and Many More\",\n            mode: mode,\n            showalert: showAlert\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5ojQ7mjyvqgWG6xM4Ik8GuVXs4U=\");\n_c = App;\nexport default App;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n// import About from \"./components/About\";\n// import Navbar from \"./components/Navbar\";\n// import TextForm from './components/TextForm';\n// import Alert from \"./components/Alert\";\n\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\n// function App() {\n//   const [mode, setMode] = useState(\"light\");\n//   const [redmode, setredmode] = useState(\"light\");\n\n//   const [alert, setalert] = useState(null);\n//   const showalert = (message, type) => {\n//     setalert({\n//       msg: message,\n//       type: type,\n//     });\n//     setTimeout(() => {\n//       setalert(null);\n//     }, 2000);\n//   };\n\n//   let togglemode = (cls) => {\n//     if (mode === \"dark\") {\n//       setMode(\"light\");\n//       showalert(\"Light Mode enable\", \"success\");\n//       // document.title = \"TextEditor-Light mode\";       //Not Needed\n//     } else {\n//       setMode(\"dark\");\n//       showalert(\"Dark Mode enable\", \"success\");\n//       // document.title = \"TextEditor-Dark mode\"         //Not Needed\n//     }\n//   };\n\n//   let togglemode1 = () => {\n//     if (redmode === \"red\") {\n//       setredmode(\"light\");\n//       showalert(\"Light Mode enable\", \"success\");\n//     } else {\n//       setredmode(\"red\");\n//       showalert(\"Red Mode enable\", \"success\");\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.body.className = `${mode} ${redmode}`; // Apply class based on mode\n//   }, [mode, redmode]);\n\n//   return (\n//     <>\n//     <Router>\n\n//       <Navbar\n//         titlex={\"TextUtiles\"}\n//         abouttext=\"About\"\n//         dropdown=\"List\"\n//         mode={mode}\n//         redmode={redmode}\n//         togglemode={togglemode}\n//         togglemode1={togglemode1}\n//       />\n\n//       <Alert alert={alert} />\n//       <div className=\"container my-3\">\n//       <Routes>\n//           <Route path=\"/about\" element={<About mode={mode} redmode = {redmode} />} />\n//           <Route path=\"/\" element={<TextForm heading=\"Text Editor -Word Counter, Character Counter, Remove Extra space and Many More\" mode={mode} showalert={showalert} />} />\n//       </Routes>\n//    {/* <TextForm heading=\"Enter Your Thought\" mode ={mode} showalert ={showalert}> </TextForm> */}\n//       </div>\n\n//       </Router>\n//     </>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","About","Navbar","TextForm","Alert","BrowserRouter","Router","Routes","Route","jsxDEV","_jsxDEV","App","_s","mode","setMode","redmode","setRedmode","alert","setAlert","showAlert","message","type","msg","setTimeout","toggleMode","color","console","log","document","body","classList","add","toggleRedMode","className","children","titlex","abouttext","dropdown","togglemode","togglemode1","fileName","_jsxFileName","lineNumber","columnNumber","path","element","heading","showalert","_c","$RefreshReg$"],"sources":["E:/Programming/React/texteditor/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from './components/TextForm';\nimport Alert from \"./components/Alert\";\n\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [redmode, setRedmode] = useState(\"light\");\n\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  const toggleMode = (color) => {\n    console.log(color);\n    if (color) {\n      document.body.classList.add(\"bg-\" + color);\n    }\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      showAlert(\"Light Mode enabled\", \"success\");\n    } else {\n      setMode(\"dark\");\n      showAlert(\"Dark Mode enabled\", \"success\");\n    }\n  };\n\n  const toggleRedMode = () => {\n    if (redmode === \"light\") {\n      setRedmode(\"red\");\n      showAlert(\"Red Mode enabled\", \"success\");\n    } else {\n      setRedmode(\"light\");\n      showAlert(\"Light Mode enabled\", \"success\");\n    }\n  };\n\n  useEffect(() => {\n    document.body.className = `${mode} ${redmode}`; // Apply class based on mode\n  }, [mode, redmode]);\n\n  return (\n    <Router>\n      <Navbar\n        titlex={\"TextUtiles\"}\n        abouttext=\"About\"\n        dropdown=\"List\"\n        mode={mode}\n        redmode={redmode}\n        togglemode={toggleMode}    \n        togglemode1={toggleRedMode}\n      />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <Routes>\n          <Route path=\"/about\" element={<About mode={mode} redmode={redmode} />} />\n          <Route path=\"/\" element={<TextForm heading=\"Text Editor - Word Counter, Character Counter, Remove Extra Space and Many More\" mode={mode} showalert={showAlert} />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n// import About from \"./components/About\";\n// import Navbar from \"./components/Navbar\";\n// import TextForm from './components/TextForm';\n// import Alert from \"./components/Alert\";\n\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\n// function App() {\n//   const [mode, setMode] = useState(\"light\");\n//   const [redmode, setredmode] = useState(\"light\");\n\n//   const [alert, setalert] = useState(null);\n//   const showalert = (message, type) => {\n//     setalert({\n//       msg: message,\n//       type: type,\n//     });\n//     setTimeout(() => {\n//       setalert(null);\n//     }, 2000);\n//   };\n  \n//   let togglemode = (cls) => {\n//     if (mode === \"dark\") {\n//       setMode(\"light\");\n//       showalert(\"Light Mode enable\", \"success\");\n//       // document.title = \"TextEditor-Light mode\";       //Not Needed\n//     } else {\n//       setMode(\"dark\");\n//       showalert(\"Dark Mode enable\", \"success\");\n//       // document.title = \"TextEditor-Dark mode\"         //Not Needed\n//     }\n//   };\n\n//   let togglemode1 = () => {\n//     if (redmode === \"red\") {\n//       setredmode(\"light\");\n//       showalert(\"Light Mode enable\", \"success\");\n//     } else {\n//       setredmode(\"red\");\n//       showalert(\"Red Mode enable\", \"success\");\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.body.className = `${mode} ${redmode}`; // Apply class based on mode\n//   }, [mode, redmode]);\n\n//   return (\n//     <>\n//     <Router>\n\n//       <Navbar\n//         titlex={\"TextUtiles\"}\n//         abouttext=\"About\"\n//         dropdown=\"List\"\n//         mode={mode}\n//         redmode={redmode}\n//         togglemode={togglemode}\n//         togglemode1={togglemode1}\n//       />\n\n\n//       <Alert alert={alert} />\n//       <div className=\"container my-3\">\n//       <Routes>\n//           <Route path=\"/about\" element={<About mode={mode} redmode = {redmode} />} />\n//           <Route path=\"/\" element={<TextForm heading=\"Text Editor -Word Counter, Character Counter, Remove Extra space and Many More\" mode={mode} showalert={showalert} />} />\n//       </Routes>\n//    {/* <TextForm heading=\"Enter Your Thought\" mode ={mode} showalert ={showalert}> </TextForm> */}\n//       </div>\n\n    \n     \n\n    \n//       </Router>\n//     </>\n//   );\n// }\n\n// export default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,oBAAoB;AAEtC,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1E,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,OAAO,CAAC;EACzC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,OAAO,CAAC;EAE/C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMoB,SAAS,GAAGA,CAACC,OAAO,EAAEC,IAAI,KAAK;IACnCH,QAAQ,CAAC;MACPI,GAAG,EAAEF,OAAO;MACZC,IAAI,EAAEA;IACR,CAAC,CAAC;IACFE,UAAU,CAAC,MAAM;MACfL,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMM,UAAU,GAAIC,KAAK,IAAK;IAC5BC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,IAAIA,KAAK,EAAE;MACTG,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,KAAK,GAAGN,KAAK,CAAC;IAC5C;IACA,IAAIZ,IAAI,KAAK,MAAM,EAAE;MACnBC,OAAO,CAAC,OAAO,CAAC;MAChBK,SAAS,CAAC,oBAAoB,EAAE,SAAS,CAAC;IAC5C,CAAC,MAAM;MACLL,OAAO,CAAC,MAAM,CAAC;MACfK,SAAS,CAAC,mBAAmB,EAAE,SAAS,CAAC;IAC3C;EACF,CAAC;EAED,MAAMa,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIjB,OAAO,KAAK,OAAO,EAAE;MACvBC,UAAU,CAAC,KAAK,CAAC;MACjBG,SAAS,CAAC,kBAAkB,EAAE,SAAS,CAAC;IAC1C,CAAC,MAAM;MACLH,UAAU,CAAC,OAAO,CAAC;MACnBG,SAAS,CAAC,oBAAoB,EAAE,SAAS,CAAC;IAC5C;EACF,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACd4B,QAAQ,CAACC,IAAI,CAACI,SAAS,GAAG,GAAGpB,IAAI,IAAIE,OAAO,EAAE,CAAC,CAAC;EAClD,CAAC,EAAE,CAACF,IAAI,EAAEE,OAAO,CAAC,CAAC;EAEnB,oBACEL,OAAA,CAACJ,MAAM;IAAA4B,QAAA,gBACLxB,OAAA,CAACR,MAAM;MACLiC,MAAM,EAAE,YAAa;MACrBC,SAAS,EAAC,OAAO;MACjBC,QAAQ,EAAC,MAAM;MACfxB,IAAI,EAAEA,IAAK;MACXE,OAAO,EAAEA,OAAQ;MACjBuB,UAAU,EAAEd,UAAW;MACvBe,WAAW,EAAEP;IAAc;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eACFjC,OAAA,CAACN,KAAK;MAACa,KAAK,EAAEA;IAAM;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvBjC,OAAA;MAAKuB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAC7BxB,OAAA,CAACH,MAAM;QAAA2B,QAAA,gBACLxB,OAAA,CAACF,KAAK;UAACoC,IAAI,EAAC,QAAQ;UAACC,OAAO,eAAEnC,OAAA,CAACT,KAAK;YAACY,IAAI,EAAEA,IAAK;YAACE,OAAO,EAAEA;UAAQ;YAAAyB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACzEjC,OAAA,CAACF,KAAK;UAACoC,IAAI,EAAC,GAAG;UAACC,OAAO,eAAEnC,OAAA,CAACP,QAAQ;YAAC2C,OAAO,EAAC,iFAAiF;YAACjC,IAAI,EAAEA,IAAK;YAACkC,SAAS,EAAE5B;UAAU;YAAAqB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/J;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb;AAAC/B,EAAA,CA/DQD,GAAG;AAAAqC,EAAA,GAAHrC,GAAG;AAiEZ,eAAeA,GAAG;;AAIlB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;;AAEA;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}