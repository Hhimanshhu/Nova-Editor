{"ast":null,"code":"// import React from 'react'\n// import './About.css';\n\n// export default function About(props) {\n\n//   const getBackgroundColor = () => {\n//     if (props.redmode === 'red') return 'red'; // Red mode background\n//     if (props.mode === 'dark') return '#212529'; // Dark mode background\n//     return 'white'; // Default light mode background\n//   };\n\n//   const getTextColor = () => {\n//     return props.mode === 'dark' || props.redmode === 'red' ? 'white' : 'black';\n//   };\n\n//   const myStyle = {\n//     color: getTextColor(),\n//     backgroundColor: getBackgroundColor(),\n//     border: `1px solid ${getTextColor()}`, // Dynamic border color\n//   };\n\n//   return (\n\n//   <div className=\"container\" style={{ color: getTextColor() }}>\n//   <h2><center>About Us</center></h2>\n//       <div className=\"accordion\" id=\"accordionExample\">\n//   <div className=\"accordion-item\" style={myStyle}>\n//     <h2 className=\"accordion-header\">\n//       <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\"  style={{ ...myStyle, border: 'none' }} >\n//         Accordion Item #1\n//       </button>\n//     </h2>\n//     <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\" style={myStyle}>\n//       <div className=\"accordion-body\" style={myStyle}>\n//         <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin \n//         adds the appropriate classes that we use to style each element. These classes control the overall appearance, \n//         as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n//         our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, \n//         though the transition does limit overflow.\n//       </div>\n//     </div>\n//   </div>\n//   <div className=\"accordion-item\"  style={myStyle} >\n//     <h2 className=\"accordion-header\">\n//       <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\"  style={{ ...myStyle, border: 'none' }} >\n//         Accordion Item #2\n//       </button>\n//     </h2>\n//     <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\" style={myStyle}>\n//       <div className=\"accordion-body\" style={myStyle}>\n//         <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the\n//         appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing\n//         and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. \n//         It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does \n//         limit overflow.\n//       </div>\n//     </div>\n//   </div>\n//   <div className=\"accordion-item\" style={myStyle}>\n//     <h2 className=\"accordion-header\">\n//       <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\"  style={{ ...myStyle, border: 'none' }} >\n//         Accordion Item #3\n//       </button>\n//     </h2>\n//     <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\" style={myStyle}>\n//       <div className=\"accordion-body\" style={myStyle}>\n//         <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the \n//         appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing \n//         and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. \n//         It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does \n//         limit overflow.\n//       </div>\n//     </div>\n//   </div>\n// </div>\n// </div>\n\n//   )\n// }","map":{"version":3,"names":[],"sources":["E:/Programming/React/texteditor/src/components/About.js"],"sourcesContent":["  // import React from 'react'\r\n  // import './About.css';\r\n\r\n  // export default function About(props) {\r\n\r\n  //   const getBackgroundColor = () => {\r\n  //     if (props.redmode === 'red') return 'red'; // Red mode background\r\n  //     if (props.mode === 'dark') return '#212529'; // Dark mode background\r\n  //     return 'white'; // Default light mode background\r\n  //   };\r\n  \r\n  //   const getTextColor = () => {\r\n  //     return props.mode === 'dark' || props.redmode === 'red' ? 'white' : 'black';\r\n  //   };\r\n  \r\n  //   const myStyle = {\r\n  //     color: getTextColor(),\r\n  //     backgroundColor: getBackgroundColor(),\r\n  //     border: `1px solid ${getTextColor()}`, // Dynamic border color\r\n  //   };\r\n  \r\n  //   return (\r\n    \r\n  //   <div className=\"container\" style={{ color: getTextColor() }}>\r\n  //   <h2><center>About Us</center></h2>\r\n  //       <div className=\"accordion\" id=\"accordionExample\">\r\n  //   <div className=\"accordion-item\" style={myStyle}>\r\n  //     <h2 className=\"accordion-header\">\r\n  //       <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\"  style={{ ...myStyle, border: 'none' }} >\r\n  //         Accordion Item #1\r\n  //       </button>\r\n  //     </h2>\r\n  //     <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\" style={myStyle}>\r\n  //       <div className=\"accordion-body\" style={myStyle}>\r\n  //         <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin \r\n  //         adds the appropriate classes that we use to style each element. These classes control the overall appearance, \r\n  //         as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding\r\n  //         our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, \r\n  //         though the transition does limit overflow.\r\n  //       </div>\r\n  //     </div>\r\n  //   </div>\r\n  //   <div className=\"accordion-item\"  style={myStyle} >\r\n  //     <h2 className=\"accordion-header\">\r\n  //       <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\"  style={{ ...myStyle, border: 'none' }} >\r\n  //         Accordion Item #2\r\n  //       </button>\r\n  //     </h2>\r\n  //     <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\" style={myStyle}>\r\n  //       <div className=\"accordion-body\" style={myStyle}>\r\n  //         <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the\r\n  //         appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing\r\n  //         and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. \r\n  //         It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does \r\n  //         limit overflow.\r\n  //       </div>\r\n  //     </div>\r\n  //   </div>\r\n  //   <div className=\"accordion-item\" style={myStyle}>\r\n  //     <h2 className=\"accordion-header\">\r\n  //       <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\"  style={{ ...myStyle, border: 'none' }} >\r\n  //         Accordion Item #3\r\n  //       </button>\r\n  //     </h2>\r\n  //     <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\" style={myStyle}>\r\n  //       <div className=\"accordion-body\" style={myStyle}>\r\n  //         <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the \r\n  //         appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing \r\n  //         and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. \r\n  //         It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does \r\n  //         limit overflow.\r\n  //       </div>\r\n  //     </div>\r\n  //   </div>\r\n  // </div>\r\n  // </div>\r\n\r\n  //   )\r\n  // }\r\n"],"mappings":"AAAE;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}