{"ast":null,"code":"var _jsxFileName = \"E:\\\\Programming\\\\React\\\\texteditor\\\\src\\\\components\\\\About.js\";\n// import React from 'react'\n// import './About.css';\n\n// export default function About(props) {\n\n//   const getBackgroundColor = () => {\n//     if (props.redmode === 'red') return 'red'; // Red mode background\n//     if (props.mode === 'dark') return '#212529'; // Dark mode background\n//     return 'white'; // Default light mode background\n//   };\n\n//   const getTextColor = () => {\n//     return props.mode === 'dark' || props.redmode === 'red' ? 'white' : 'black';\n//   };\n\n//   const myStyle = {\n//     color: getTextColor(),\n//     backgroundColor: getBackgroundColor(),\n//     border: `1px solid ${getTextColor()}`, // Dynamic border color\n//   };\n\n//   return (\n\n//   <div className=\"container\" style={{ color: getTextColor() }}>\n//   <h2><center>About Us</center></h2>\n//       <div className=\"accordion\" id=\"accordionExample\">\n//   <div className=\"accordion-item\" style={myStyle}>\n//     <h2 className=\"accordion-header\">\n//       <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\"  style={{ ...myStyle, border: 'none' }} >\n//         Accordion Item #1\n//       </button>\n//     </h2>\n//     <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\" style={myStyle}>\n//       <div className=\"accordion-body\" style={myStyle}>\n//         <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin \n//         adds the appropriate classes that we use to style each element. These classes control the overall appearance, \n//         as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n//         our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, \n//         though the transition does limit overflow.\n//       </div>\n//     </div>\n//   </div>\n//   <div className=\"accordion-item\"  style={myStyle} >\n//     <h2 className=\"accordion-header\">\n//       <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\"  style={{ ...myStyle, border: 'none' }} >\n//         Accordion Item #2\n//       </button>\n//     </h2>\n//     <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\" style={myStyle}>\n//       <div className=\"accordion-body\" style={myStyle}>\n//         <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the\n//         appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing\n//         and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. \n//         It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does \n//         limit overflow.\n//       </div>\n//     </div>\n//   </div>\n//   <div className=\"accordion-item\" style={myStyle}>\n//     <h2 className=\"accordion-header\">\n//       <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\"  style={{ ...myStyle, border: 'none' }} >\n//         Accordion Item #3\n//       </button>\n//     </h2>\n//     <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\" style={myStyle}>\n//       <div className=\"accordion-body\" style={myStyle}>\n//         <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the \n//         appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing \n//         and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. \n//         It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does \n//         limit overflow.\n//       </div>\n//     </div>\n//   </div>\n// </div>\n// </div>\n\n//   )\n// }\nimport React from \"react\";\nimport \"./About.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function About({\n  mode\n}) {\n  const getBackgroundColor = () => {\n    if (mode === \"red\") return \"red\";\n    if (mode === \"dark\") return \"#212529\";\n    return \"white\";\n  };\n  const getTextColor = () => mode === \"dark\" || mode === \"red\" ? \"white\" : \"black\";\n  const myStyle = {\n    color: getTextColor(),\n    backgroundColor: getBackgroundColor(),\n    border: `1px solid ${getTextColor()}`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container my-3 about-container\",\n    style: myStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"About Us\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"accordion\",\n      id: \"accordionExample\",\n      children: [1, 2, 3].map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accordion-item\",\n        style: myStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"accordion-header\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"accordion-button\",\n            type: \"button\",\n            \"data-bs-toggle\": \"collapse\",\n            \"data-bs-target\": `#collapse${item}`,\n            \"aria-expanded\": \"false\",\n            \"aria-controls\": `collapse${item}`,\n            style: {\n              ...myStyle,\n              border: \"none\"\n            },\n            children: [\"Accordion Item #\", item]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: `collapse${item}`,\n          className: \"accordion-collapse collapse\",\n          \"data-bs-parent\": \"#accordionExample\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"accordion-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\"This is item #\", item, \" accordion body.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 17\n            }, this), \" It is hidden by default...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)]\n      }, item, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_c = About;\nvar _c;\n$RefreshReg$(_c, \"About\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","About","mode","getBackgroundColor","getTextColor","myStyle","color","backgroundColor","border","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","id","map","item","type","_c","$RefreshReg$"],"sources":["E:/Programming/React/texteditor/src/components/About.js"],"sourcesContent":["  // import React from 'react'\r\n  // import './About.css';\r\n\r\n  // export default function About(props) {\r\n\r\n  //   const getBackgroundColor = () => {\r\n  //     if (props.redmode === 'red') return 'red'; // Red mode background\r\n  //     if (props.mode === 'dark') return '#212529'; // Dark mode background\r\n  //     return 'white'; // Default light mode background\r\n  //   };\r\n  \r\n  //   const getTextColor = () => {\r\n  //     return props.mode === 'dark' || props.redmode === 'red' ? 'white' : 'black';\r\n  //   };\r\n  \r\n  //   const myStyle = {\r\n  //     color: getTextColor(),\r\n  //     backgroundColor: getBackgroundColor(),\r\n  //     border: `1px solid ${getTextColor()}`, // Dynamic border color\r\n  //   };\r\n  \r\n  //   return (\r\n    \r\n  //   <div className=\"container\" style={{ color: getTextColor() }}>\r\n  //   <h2><center>About Us</center></h2>\r\n  //       <div className=\"accordion\" id=\"accordionExample\">\r\n  //   <div className=\"accordion-item\" style={myStyle}>\r\n  //     <h2 className=\"accordion-header\">\r\n  //       <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\"  style={{ ...myStyle, border: 'none' }} >\r\n  //         Accordion Item #1\r\n  //       </button>\r\n  //     </h2>\r\n  //     <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\" style={myStyle}>\r\n  //       <div className=\"accordion-body\" style={myStyle}>\r\n  //         <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin \r\n  //         adds the appropriate classes that we use to style each element. These classes control the overall appearance, \r\n  //         as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding\r\n  //         our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, \r\n  //         though the transition does limit overflow.\r\n  //       </div>\r\n  //     </div>\r\n  //   </div>\r\n  //   <div className=\"accordion-item\"  style={myStyle} >\r\n  //     <h2 className=\"accordion-header\">\r\n  //       <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\"  style={{ ...myStyle, border: 'none' }} >\r\n  //         Accordion Item #2\r\n  //       </button>\r\n  //     </h2>\r\n  //     <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\" style={myStyle}>\r\n  //       <div className=\"accordion-body\" style={myStyle}>\r\n  //         <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the\r\n  //         appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing\r\n  //         and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. \r\n  //         It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does \r\n  //         limit overflow.\r\n  //       </div>\r\n  //     </div>\r\n  //   </div>\r\n  //   <div className=\"accordion-item\" style={myStyle}>\r\n  //     <h2 className=\"accordion-header\">\r\n  //       <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\"  style={{ ...myStyle, border: 'none' }} >\r\n  //         Accordion Item #3\r\n  //       </button>\r\n  //     </h2>\r\n  //     <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\" style={myStyle}>\r\n  //       <div className=\"accordion-body\" style={myStyle}>\r\n  //         <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the \r\n  //         appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing \r\n  //         and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. \r\n  //         It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does \r\n  //         limit overflow.\r\n  //       </div>\r\n  //     </div>\r\n  //   </div>\r\n  // </div>\r\n  // </div>\r\n\r\n  //   )\r\n  // }\r\n  import React from \"react\";\r\nimport \"./About.css\";\r\n\r\nexport default function About({ mode }) {\r\n  const getBackgroundColor = () => {\r\n    if (mode === \"red\") return \"red\";\r\n    if (mode === \"dark\") return \"#212529\";\r\n    return \"white\";\r\n  };\r\n\r\n  const getTextColor = () => (mode === \"dark\" || mode === \"red\" ? \"white\" : \"black\");\r\n\r\n  const myStyle = {\r\n    color: getTextColor(),\r\n    backgroundColor: getBackgroundColor(),\r\n    border: `1px solid ${getTextColor()}`,\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-3 about-container\" style={myStyle}>\r\n      <h2 className=\"text-center\">About Us</h2>\r\n\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        {[1, 2, 3].map((item) => (\r\n          <div className=\"accordion-item\" style={myStyle} key={item}>\r\n            <h2 className=\"accordion-header\">\r\n              <button\r\n                className=\"accordion-button\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target={`#collapse${item}`}\r\n                aria-expanded=\"false\"\r\n                aria-controls={`collapse${item}`}\r\n                style={{ ...myStyle, border: \"none\" }}\r\n              >\r\n                Accordion Item #{item}\r\n              </button>\r\n            </h2>\r\n            <div id={`collapse${item}`} className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n              <div className=\"accordion-body\">\r\n                <strong>This is item #{item} accordion body.</strong> It is hidden by default...\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}